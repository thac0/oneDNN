.. index:: pair: struct; dnnl::post_ops
.. _doxid-structdnnl_1_1post__ops:

struct dnnl::post_ops
=====================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Post-ops. :ref:`More...<details-structdnnl_1_1post__ops>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <dnnl.hpp>
	
	struct post_ops: public :ref:`dnnl::handle<doxid-structdnnl_1_1handle>`
	{
		// methods
	
		:ref:`post_ops<doxid-structdnnl_1_1post__ops_1a8e1d47722db8f53b3689468788ec2c01>`();
		int :ref:`len<doxid-structdnnl_1_1post__ops_1a26d76d6a99c01b33eee312d1491c1d4e>`() const;
		:ref:`primitive::kind<doxid-structdnnl_1_1primitive_1ad1ec93215a0cf3aa0a32bae0c2cd9169>` :ref:`kind<doxid-structdnnl_1_1post__ops_1a79ef658c2e7ac0fddbd605c6864c19f9>`(int index) const;
	
		void :ref:`append_sum<doxid-structdnnl_1_1post__ops_1ab8e3832e8600216a3646e9050d3bc1f3>`(
			float scale = 1.f,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` data_type = :ref:`memory::data_type::undef<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dceaf31ee5e3824f1f5e5d206bdf3029f22b>`
			);
	
		void :ref:`append_sum<doxid-structdnnl_1_1post__ops_1a8cb2a7ff1020dd066a007932a9e4affd>`(
			float scale,
			int32_t zero_point,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` data_type = :ref:`memory::data_type::undef<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dceaf31ee5e3824f1f5e5d206bdf3029f22b>`
			);
	
		void :ref:`get_params_sum<doxid-structdnnl_1_1post__ops_1a80a7b5900334d558aa5abbf9f1f1661a>`(int index, float& scale) const;
		void :ref:`get_params_sum<doxid-structdnnl_1_1post__ops_1a8d59100bcd254a15d6d0ee4309e07959>`(int index, float& scale, :ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& data_type) const;
	
		void :ref:`get_params_sum<doxid-structdnnl_1_1post__ops_1a522a6d8afcb2e9887cc4af2a3d821cff>`(
			int index,
			float& scale,
			int32_t& zero_point,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& data_type
			) const;
	
		void :ref:`append_eltwise<doxid-structdnnl_1_1post__ops_1a28460923ad579c780e4027a6256fe207>`(float scale, :ref:`algorithm<doxid-group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640>` aalgorithm, float alpha, float beta);
	
		void :ref:`get_params_eltwise<doxid-structdnnl_1_1post__ops_1a0158eefb937f15634753922dc9e9455a>`(
			int index,
			float& scale,
			:ref:`algorithm<doxid-group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640>`& aalgorithm,
			float& alpha,
			float& beta
			) const;
	
		void :ref:`append_dw_k3s1p1<doxid-structdnnl_1_1post__ops_1a4229db0e1e1eab273ed0e2b3e18402de>`(
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` weights_data_type,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` bias_data_type,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` dst_data_type,
			int mask,
			const std::vector<float>& scales
			);
	
		void :ref:`get_params_dw_k3s1p1<doxid-structdnnl_1_1post__ops_1aefb536724307912fdfd1439383679501>`(
			int index,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& weights_data_type,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& bias_data_type,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& dst_data_type,
			int& mask,
			std::vector<float>& scales
			) const;
	
		void :ref:`append_dw_k3s2p1<doxid-structdnnl_1_1post__ops_1a88ed886c27b4df4667431ed48d29f4c1>`(
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` weights_data_type,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` bias_data_type,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` dst_data_type,
			int mask,
			const std::vector<float>& scales
			);
	
		void :ref:`get_params_dw_k3s2p1<doxid-structdnnl_1_1post__ops_1a128429160104654adcfb651e9ee02905>`(
			int index,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& weights_data_type,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& bias_data_type,
			:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& dst_data_type,
			int& mask,
			std::vector<float>& scales
			) const;
	
		void :ref:`append_binary<doxid-structdnnl_1_1post__ops_1a40bb2b39a685726ac54873b203be41b5>`(:ref:`algorithm<doxid-group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640>` aalgorithm, const :ref:`memory::desc<doxid-structdnnl_1_1memory_1_1desc>`& src1_desc);
	
		void :ref:`get_params_binary<doxid-structdnnl_1_1post__ops_1a726a64a5cd160a51b2f93d33f482670f>`(
			int index,
			:ref:`algorithm<doxid-group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640>`& aalgorithm,
			:ref:`memory::desc<doxid-structdnnl_1_1memory_1_1desc>`& src1_desc
			) const;
	
		void :ref:`set_output_scales<doxid-structdnnl_1_1post__ops_1afbca16b83429bc2f5e47ec07807ef1f6>`(int mask, const std::vector<float>& scales);
		void :ref:`get_scales<doxid-structdnnl_1_1post__ops_1aba36c92225a22ceed02064fe1b5209cb>`(int arg, int& mask, std::vector<float>& scales) const;
		void :ref:`set_scales<doxid-structdnnl_1_1post__ops_1a3dd0e698adc3e501ba1069290d314b96>`(int arg, int mask, const std::vector<float>& scales);
		void :ref:`get_zero_points<doxid-structdnnl_1_1post__ops_1ad8a22da09f2b251a97f14c8a388ad09f>`(int arg, int& mask, std::vector<int32_t>& zero_points) const;
		void :ref:`set_zero_points<doxid-structdnnl_1_1post__ops_1ae9302dadab0571ff4387cf8a5f050160>`(int arg, int mask, const std::vector<int32_t>& zero_points);
		const post_ops :ref:`get_post_ops<doxid-structdnnl_1_1post__ops_1a27a9dd38b90707bceb50e7cd073e6b86>`() const;
		void :ref:`set_post_ops<doxid-structdnnl_1_1post__ops_1ac2a1ad4e8978966a8723baedf75d0edd>`(const post_ops ops);
		void :ref:`set_rnn_data_qparams<doxid-structdnnl_1_1post__ops_1a20cf7c08b56ad23a7125478ce7ac1113>`(float scale, float shift);
		void :ref:`get_rnn_data_qparams<doxid-structdnnl_1_1post__ops_1a7c6f9f1ae3e868240f1d01f68e8f55ab>`(float& scale, float& shift);
		void :ref:`set_rnn_weights_qparams<doxid-structdnnl_1_1post__ops_1a802aea3d7e50aefc8eae68f84ae44af3>`(int mask, const std::vector<float>& scales);
		void :ref:`get_rnn_weights_qparams<doxid-structdnnl_1_1post__ops_1aacb4e2be880583eec5bb86977151a2cc>`(int& mask, std::vector<float>& scales);
	
		void :ref:`set_rnn_weights_projection_qparams<doxid-structdnnl_1_1post__ops_1a059426e563fab17134c341f40ede2796>`(
			int mask,
			const std::vector<float>& scales
			);
	
		void :ref:`get_rnn_weights_projection_qparams<doxid-structdnnl_1_1post__ops_1a38fd234aecae3c112565d1d6a11736ac>`(int& mask, std::vector<float>& scales);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		:ref:`handle<doxid-structdnnl_1_1handle_1a5c631f7e5e4c92a13edb8e3422d3a973>`();
		:ref:`handle<doxid-structdnnl_1_1handle_1a022001b5b9c8940a1326a02b61fc4860>`(const :ref:`handle<doxid-structdnnl_1_1handle>`<T, traits>&);
		:ref:`handle<doxid-structdnnl_1_1handle>`<T, traits>& :ref:`operator =<doxid-structdnnl_1_1handle_1a4ad1ff54e4aafeb560a869c49aa20b52>` (const :ref:`handle<doxid-structdnnl_1_1handle>`<T, traits>&);
		:ref:`handle<doxid-structdnnl_1_1handle_1aa13f3ecf4db240717074814412c7e70c>`(:ref:`handle<doxid-structdnnl_1_1handle>`<T, traits>&&);
		:ref:`handle<doxid-structdnnl_1_1handle>`<T, traits>& :ref:`operator =<doxid-structdnnl_1_1handle_1af3f85524f3d83abdd4917b46ce23e727>` (:ref:`handle<doxid-structdnnl_1_1handle>`<T, traits>&&);
		:ref:`handle<doxid-structdnnl_1_1handle_1a9c408c09fce1278f5cb0d1fa9818fc86>`(T t, bool weak = false);
		void :ref:`reset<doxid-structdnnl_1_1handle_1a8862ef3d31c3b19bd88395e0b1373909>`(T t, bool weak = false);
		T :ref:`get<doxid-structdnnl_1_1handle_1affb19aaf768579eebdf885edbbef7d7a>`(bool allow_empty = false) const;
		:ref:`operator T<doxid-structdnnl_1_1handle_1ab3560c3d12724f48e9fdbe47077ff342>` () const;
		:ref:`operator bool<doxid-structdnnl_1_1handle_1af014b68c14db64b9bb6a2034fe04440e>` () const;
		bool :ref:`operator ==<doxid-structdnnl_1_1handle_1a8569ba9d1b62264df858f3b3316577c6>` (const :ref:`handle<doxid-structdnnl_1_1handle>`<T, traits>& other) const;
		bool :ref:`operator !=<doxid-structdnnl_1_1handle_1a4aaa512672b0ed203ef78be4ceac025e>` (const :ref:`handle<doxid-structdnnl_1_1handle>`& other) const;

.. _details-structdnnl_1_1post__ops:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Post-ops.

Post-ops are computations executed after the main primitive computations and are attached to the primitive via primitive attributes.



.. rubric:: See also:

:ref:`Primitive Attributes: Post-ops <doxid-dev_guide_attributes_post_ops>`

Methods
-------

.. index:: pair: function; post_ops
.. _doxid-structdnnl_1_1post__ops_1a8e1d47722db8f53b3689468788ec2c01:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	post_ops()

Constructs an empty sequence of post-ops.

.. index:: pair: function; len
.. _doxid-structdnnl_1_1post__ops_1a26d76d6a99c01b33eee312d1491c1d4e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int len() const

Returns the number of post-ops entries.

.. index:: pair: function; kind
.. _doxid-structdnnl_1_1post__ops_1a79ef658c2e7ac0fddbd605c6864c19f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`primitive::kind<doxid-structdnnl_1_1primitive_1ad1ec93215a0cf3aa0a32bae0c2cd9169>` kind(int index) const

Returns the primitive kind of post-op at entry with a certain index.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- index

		- Index of the post-op to return the kind for.



.. rubric:: Returns:

Primitive kind of the post-op at the specified index.

.. index:: pair: function; append_sum
.. _doxid-structdnnl_1_1post__ops_1ab8e3832e8600216a3646e9050d3bc1f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void append_sum(
		float scale = 1.f,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` data_type = :ref:`memory::data_type::undef<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dceaf31ee5e3824f1f5e5d206bdf3029f22b>`
		)

Appends an accumulation (sum) post-op.

Prior to accumulating the result, the previous value would be multiplied by a scaling factor ``scale``.

The kind of this post-op is :ref:`dnnl::primitive::kind::sum <doxid-structdnnl_1_1primitive_1ad1ec93215a0cf3aa0a32bae0c2cd9169a1d623b89683f9ce4e074de1676d12416>`.

This feature may improve performance for cases like residual learning blocks, where the result of convolution is accumulated to the previously computed activations. The parameter ``scale`` may be used for the integer-based computations when the result and previous activations have different logical scaling factors.

In the simplest case when the accumulation is the only post-op, the computations will be ``dst[:] := scale * dst[:] + op(...)`` instead of ``dst[:] := op(...)``.

If ``data_type`` is specified, the original dst tensor will be reinterpreted as a tensor with the provided data type. Because it is a reinterpretation, data_type and dst data type should have the same size. As a result, computations will be ``dst[:] <- scale * as_data_type(dst[:]) + op(...)`` instead of ``dst[:] <- op(...)``.

.. note:: 

   This post-op executes in-place and does not change the destination layout.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- scale

		- Scaling factor.

	*
		- data_type

		- Data type.

.. index:: pair: function; append_sum
.. _doxid-structdnnl_1_1post__ops_1a8cb2a7ff1020dd066a007932a9e4affd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void append_sum(
		float scale,
		int32_t zero_point,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` data_type = :ref:`memory::data_type::undef<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dceaf31ee5e3824f1f5e5d206bdf3029f22b>`
		)

Appends an accumulation (sum) post-op.

Prior to accumulating the result, the previous value will be will be reduced by zero point ``zero_point`` and multiplied by a scaling factor ``scale``.

The kind of this post-op is :ref:`dnnl::primitive::kind::sum <doxid-structdnnl_1_1primitive_1ad1ec93215a0cf3aa0a32bae0c2cd9169a1d623b89683f9ce4e074de1676d12416>`.

This feature may improve performance for cases like dequantize the asymmetrically quantized sum's src1 tensor to f32 domain before performing the sum operation by subtracting ``zero_point`` before the scaling.

In the simplest case when the accumulation is the only post-op, the computations will be ``dst[:] := scale * (dst[:] - zero_point) + op(...)`` instead of ``dst[:] := op(...)``.

If ``data_type`` is specified, the original dst tensor will be reinterpreted as a tensor with the provided data type. Because it is a reinterpretation, data_type and dst data type should have the same size. As a result, computations will be ``dst[:] <- scale * (as_data_type(dst[:]) - zero_point) + op(...)`` instead of ``dst[:] <- op(...)``.

.. note:: 

   This post-op executes in-place and does not change the destination layout.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- scale

		- Scaling factor.

	*
		- zero_point

		- Zero point.

	*
		- data_type

		- Data type.

.. index:: pair: function; get_params_sum
.. _doxid-structdnnl_1_1post__ops_1a80a7b5900334d558aa5abbf9f1f1661a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_params_sum(int index, float& scale) const

Returns the parameters of an accumulation (sum) post-op.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- index

		- Index of the sum post-op.

	*
		- scale

		- Scaling factor of the sum post-op.

.. index:: pair: function; get_params_sum
.. _doxid-structdnnl_1_1post__ops_1a8d59100bcd254a15d6d0ee4309e07959:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_params_sum(int index, float& scale, :ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& data_type) const

Returns the parameters of an accumulation (sum) post-op.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- index

		- Index of the sum post-op.

	*
		- scale

		- Scaling factor of the sum post-op.

	*
		- data_type

		- Data type of the sum post-op.

.. index:: pair: function; get_params_sum
.. _doxid-structdnnl_1_1post__ops_1a522a6d8afcb2e9887cc4af2a3d821cff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_params_sum(
		int index,
		float& scale,
		int32_t& zero_point,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& data_type
		) const

Returns the parameters of an accumulation (sum) post-op.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- index

		- Index of the sum post-op.

	*
		- scale

		- Scaling factor of the sum post-op.

	*
		- zero_point

		- Single scalar int32_t value of zeropoint.

	*
		- data_type

		- Data type of the sum post-op.

.. index:: pair: function; append_eltwise
.. _doxid-structdnnl_1_1post__ops_1a28460923ad579c780e4027a6256fe207:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void append_eltwise(float scale, :ref:`algorithm<doxid-group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640>` aalgorithm, float alpha, float beta)

Appends an elementwise post-op.

The kind of this post-op is :ref:`dnnl::primitive::kind::eltwise <doxid-structdnnl_1_1primitive_1ad1ec93215a0cf3aa0a32bae0c2cd9169a98b908c7d0339bb6a4832db44fc2c8da>`.

In the simplest case when the elementwise is the only post-op, the computations would be ``dst[:] := scale * eltwise_op (op(...))`` instead of ``dst[:] <- op(...)``, where eltwise_op is configured with the given parameters.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- scale

		- Scaling factor.

	*
		- aalgorithm

		- Elementwise algorithm.

	*
		- alpha

		- Alpha parameter for the elementwise algorithm.

	*
		- beta

		- Beta parameter for the elementwise algorithm.

.. index:: pair: function; get_params_eltwise
.. _doxid-structdnnl_1_1post__ops_1a0158eefb937f15634753922dc9e9455a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_params_eltwise(
		int index,
		float& scale,
		:ref:`algorithm<doxid-group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640>`& aalgorithm,
		float& alpha,
		float& beta
		) const

Returns parameters of an elementwise post-op.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- index

		- Index of the post-op.

	*
		- scale

		- Output scaling factor.

	*
		- aalgorithm

		- Output elementwise algorithm kind.

	*
		- alpha

		- Output alpha parameter for the elementwise algorithm.

	*
		- beta

		- Output beta parameter for the elementwise algorithm.

.. index:: pair: function; append_dw_k3s1p1
.. _doxid-structdnnl_1_1post__ops_1a4229db0e1e1eab273ed0e2b3e18402de:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void append_dw_k3s1p1(
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` weights_data_type,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` bias_data_type,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` dst_data_type,
		int mask,
		const std::vector<float>& scales
		)

Appends a depthwise post-op convolution with stride 1.

This post-op can only be fused with a 2D 1x1 convolution (convolution with weights spatial dimension equal to 1 i.e., kh=kw=1).

The kind of this post-op is :ref:`dnnl_convolution <doxid-group__dnnl__api__primitives__common_1gga9878f4795e53ad8443e5c0a29e53286aa402cfeaa257524d301bb73e770bc87f6>`.

The number of outputs for primitive remain same as before. The output size remain same as the original primitive due to stride=1.

The Post-op can be defined as:

.. code-block:: cpp

	dst[:] <- scales * (conv_dw(conv_1x1))

See :ref:`dev_guide_attributes_post_ops_depthwise <doxid-dev_guide_attributes_post_ops_1dev_guide_attributes_post_ops_depthwise>` and :ref:`dev_guide_attributes_post_ops_depthwise_fusion <doxid-dev_guide_attributes_post_ops_1dev_guide_attributes_post_ops_depthwise_fusion>` for more info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- weights_data_type

		- Weights data type of depthwise post-op

	*
		- bias_data_type

		- Bias data type of depthwise post-op

	*
		- dst_data_type

		- Output data type of depthwise post-op

	*
		- mask

		- Output scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` array. The set i-th bit indicates that a dedicated output scaling factor is used for each index along that dimension. The mask value of 0 implies a common scaling factor for the whole output tensor.

	*
		- scales

		- Output pointer to a constant array of float scaling factors.

.. index:: pair: function; get_params_dw_k3s1p1
.. _doxid-structdnnl_1_1post__ops_1aefb536724307912fdfd1439383679501:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_params_dw_k3s1p1(
		int index,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& weights_data_type,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& bias_data_type,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& dst_data_type,
		int& mask,
		std::vector<float>& scales
		) const

Returns the parameters of an depthwise post-op with stride 1.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- index

		- Index of the elementwise post-op.

	*
		- weights_data_type

		- Weights data type of depthwise post-op

	*
		- bias_data_type

		- Bias data type of depthwise post-op

	*
		- dst_data_type

		- Output data type of depthwise post-op

	*
		- mask

		- Output scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` array. The set i-th bit indicates that a dedicated output scaling factor is used for each index along that dimension. The mask value of 0 implies a common scaling factor for the whole output tensor.

	*
		- scales

		- Output pointer to a constant array of float scaling factors.

.. index:: pair: function; append_dw_k3s2p1
.. _doxid-structdnnl_1_1post__ops_1a88ed886c27b4df4667431ed48d29f4c1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void append_dw_k3s2p1(
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` weights_data_type,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` bias_data_type,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>` dst_data_type,
		int mask,
		const std::vector<float>& scales
		)

Appends a depthwise post-op convolution with stride 2.

This post-op can only be fused with a 2D 1x1 convolution (convolution with weights spatial dimension equal to 1 i.e., kh=kw=1).

The kind of this post-op is :ref:`dnnl_convolution <doxid-group__dnnl__api__primitives__common_1gga9878f4795e53ad8443e5c0a29e53286aa402cfeaa257524d301bb73e770bc87f6>`.

The number of outputs for primitive remain same as before. The output spatial size can be derived as below:

output_height = ceil(output_height_1x1_convolution, stride) output_width = ceil(output_width_1x1_convolution, stride)

The Post-op can be defined as:

.. code-block:: cpp

	dst[:] <- scales * (conv_dw(conv_1x1))

See :ref:`dev_guide_attributes_post_ops_depthwise <doxid-dev_guide_attributes_post_ops_1dev_guide_attributes_post_ops_depthwise>` and :ref:`dev_guide_attributes_post_ops_depthwise_fusion <doxid-dev_guide_attributes_post_ops_1dev_guide_attributes_post_ops_depthwise_fusion>` for more info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- weights_data_type

		- Weights data type of depthwise post-op

	*
		- bias_data_type

		- Bias data type of depthwise post-op

	*
		- dst_data_type

		- Output data type of depthwise post-op

	*
		- mask

		- Output scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` array. The set i-th bit indicates that a dedicated output scaling factor is used for each index along that dimension. The mask value of 0 implies a common scaling factor for the whole output tensor.

	*
		- scales

		- Output pointer to a constant array of float scaling factors.



.. rubric:: Returns:

:ref:`dnnl_success <doxid-group__dnnl__api__utils_1ggad24f9ded06e34d3ee71e7fc4b408d57aaa31395e9dccc103cf166cf7b38fc5b9c>` on success and a status describing the error otherwise

.. index:: pair: function; get_params_dw_k3s2p1
.. _doxid-structdnnl_1_1post__ops_1a128429160104654adcfb651e9ee02905:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_params_dw_k3s2p1(
		int index,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& weights_data_type,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& bias_data_type,
		:ref:`memory::data_type<doxid-structdnnl_1_1memory_1a8e83474ec3a50e08e37af76c8c075dce>`& dst_data_type,
		int& mask,
		std::vector<float>& scales
		) const

Returns the parameters of an depthwise post-op with stride 2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- index

		- Index of the elementwise post-op.

	*
		- weights_data_type

		- Weights data type of depthwise post-op

	*
		- bias_data_type

		- Bias data type of depthwise post-op

	*
		- dst_data_type

		- Output data type of depthwise post-op

	*
		- mask

		- Output scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` array. The set i-th bit indicates that a dedicated output scaling factor is used for each index along that dimension. The mask value of 0 implies a common scaling factor for the whole output tensor.

	*
		- scales

		- Output pointer to a constant array of float scaling factors.

.. index:: pair: function; append_binary
.. _doxid-structdnnl_1_1post__ops_1a40bb2b39a685726ac54873b203be41b5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void append_binary(:ref:`algorithm<doxid-group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640>` aalgorithm, const :ref:`memory::desc<doxid-structdnnl_1_1memory_1_1desc>`& src1_desc)

Appends a binary post-op.

The kind of this post operation is :ref:`dnnl_binary <doxid-group__dnnl__api__primitives__common_1gga9878f4795e53ad8443e5c0a29e53286aa1d51705e2642ce2ce19a3e163bb25f93>`.

In the simplest case when the binary is the only post operation, the computations would be:

.. code-block:: cpp

	dst[:] <- binary_op (dst[:], another_input[:])

where binary_op is configured with the given parameters. binary_op supports broadcast semantics for a second operand.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- aalgorithm

		- Binary algorithm for the post-op.

	*
		- src1_desc

		- Memory descriptor of a second operand.

.. index:: pair: function; get_params_binary
.. _doxid-structdnnl_1_1post__ops_1a726a64a5cd160a51b2f93d33f482670f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_params_binary(
		int index,
		:ref:`algorithm<doxid-group__dnnl__api__attributes_1ga00377dd4982333e42e8ae1d09a309640>`& aalgorithm,
		:ref:`memory::desc<doxid-structdnnl_1_1memory_1_1desc>`& src1_desc
		) const

Returns the parameters of a binary post-op.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- index

		- Index of the binary post-op.

	*
		- aalgorithm

		- Output binary algorithm kind.

	*
		- src1_desc

		- Output memory descriptor of a second operand.

.. index:: pair: function; set_output_scales
.. _doxid-structdnnl_1_1post__ops_1afbca16b83429bc2f5e47ec07807ef1f6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void set_output_scales(int mask, const std::vector<float>& scales)

Appends a prelu forward post-op.

.. code-block:: cpp

	The kind of this post-op is #dnnl::primitive::kind::prelu.

	The post-op can be defined as:

	     dst[:] <- prelu(dst[:], weights[:])
	     prelu:
	     dst[:] <- dst[:] if dst[:] > 0
	     dst[:] <- dst[:] * weights[:] if dst[:] <= 0


	Example usage:



.. ref-code-block:: cpp

	     *      int mb = 32, oc = 32,
	     *          oh = 14, ow = 14; // convolution output params
	     *      // unique weights per output channel
	     *      vector<float> weights = { ... };
	     *      int oc_dim = 1; // mb_dim = 0, channel_dim = 1, height_dim = 2, ...
	     * 
	     *      // construct a convolution descriptor
	     *      dnnl::convolution::desc conv_d;
	     * 
	     *      dnnl::primitive_attr attr;
	     *      attr.append_prelu(1 << oc_dim);
	     * 
	     *      :ref:`dnnl::primitive_desc <doxid-structdnnl_1_1primitive__desc>` conv_pd(conv_d, attr, :ref:`engine <doxid-group__dnnl__api__primitives__common_1gga94efdd650364f4d9776cfb9b711cbdc1aad1943a9fd6d3d7ee1e6af41a5b0d3e7>`);
	     *      memory prelu_weights({{1}, dt::f32, {1}}, eng, weights.data());
	     * 
	     *      std::unordered_map<int, memory> conv_args;
	     * 
	     *      conv_args.insert(
	     *       {:ref:`DNNL_ARG_ATTR_MULTIPLE_POST_OP <doxid-group__dnnl__api__primitives__common_1ga30839136bbf81b03a173e0842ae015e1>`(0) | :ref:`DNNL_ARG_WEIGHTS <doxid-group__dnnl__api__primitives__common_1gaf279f28c59a807e71a70c719db56c5b3>`, prelu_weights})
	
	     *  @note
	     *      The order of dimensions does not depend on how elements are laid
	     *      out in memory. For example:
	     *      - for a 2D CNN activations tensor the order is always (n, c)
	     *      - for a 4D CNN activations tensor the order is always (n, c, h, w)
	     *      - for a 5D CNN weights tensor the order is always
	     *         (g, oc, ic, kh, kw)
	     * 
	     *     Prelu weights tensor is passed in runtime execution phase. Prelu
	     *     weights tensor data type is implicitly assumed as f32 using plain
	     *     layout (a, ab, acb, acdb, acdeb)
	
	     *  @param mask Defines the correspondence between the output tensor
	     *      dimensions and the prelu weights tensor. The set i-th bit indicates
	     *      that a dedicated weights value is used for each index along that
	     *      dimension. Set the mask to 0 to use a common weights value
	     *      for the whole output tensor.
	    void append_prelu(int mask) {
	        :ref:`error::wrap_c_api <doxid-structdnnl_1_1error_1a9d91127d0524c0b7ac1ae4ba4c79d0af>`(:ref:`dnnl_post_ops_append_prelu <doxid-group__dnnl__api__attributes_1ga833465b0aac349988b29245e1112656f>`(get(), mask),
	                "could not append a prelu post-op");
	    }
	
	     *  Returns the parameters of a prelu post-op.
	     * 
	     *  @param index Index of the prelu post-op.
	     *  @param maks Weights mask of prelu post-op.
	    void get_params_prelu(int index, int &mask) const {
	        :ref:`error::wrap_c_api <doxid-structdnnl_1_1error_1a9d91127d0524c0b7ac1ae4ba4c79d0af>`(:ref:`dnnl_post_ops_get_params_prelu <doxid-group__dnnl__api__attributes_1ga5207e88213978239909da6e9f346cda7>`(get(), index, &mask),
	                "could not get parameters of a binary post-op");
	    }
	};
	
	 *  
	
	
	
	
	
	
	
	
	 *  Primitive attributes.
	 * 
	 *  @sa @ref dev_guide_attributes
	struct primitive_attr : public :ref:`handle <doxid-structdnnl_1_1handle_1a5c631f7e5e4c92a13edb8e3422d3a973>`<dnnl_primitive_attr_t> {
	    using handle<dnnl_primitive_attr_t>::handle;
	
	     *  Constructs default (empty) primitive attributes.
	    primitive_attr() {
	        :ref:`dnnl_primitive_attr_t <doxid-structdnnl__primitive__attr>` result;
	        :ref:`error::wrap_c_api <doxid-structdnnl_1_1error_1a9d91127d0524c0b7ac1ae4ba4c79d0af>`(:ref:`dnnl_primitive_attr_create <doxid-group__dnnl__api__attributes_1gaf630fdc0d8d0fd8522ec93852a559081>`(&result),
	                "could not create primitive attribute");
	        :ref:`reset <doxid-structdnnl_1_1handle_1a8862ef3d31c3b19bd88395e0b1373909>`(result);
	    }
	
	     *  Creates primitive attributes from a C :ref:`API ::dnnl_primitive_attr_t <doxid-group__dnnl__api__attributes_1ga06d701a25b82d4c8a93aaabb93e03dc3>`
	     *  :ref:`handle <doxid-structdnnl_1_1handle_1a5c631f7e5e4c92a13edb8e3422d3a973>`. The resulting :ref:`handle <doxid-structdnnl_1_1handle_1a5c631f7e5e4c92a13edb8e3422d3a973>` is not weak and the C :ref:`handle <doxid-structdnnl_1_1handle_1a5c631f7e5e4c92a13edb8e3422d3a973>` will be
	     *  destroyed during the destruction of the C++ object.
	     * 
	     *  @param attr The C API primitive attributes.
	    primitive_attr(:ref:`dnnl_primitive_attr_t <doxid-structdnnl__primitive__attr>` attr)
	        : :ref:`handle <doxid-structdnnl_1_1handle_1a5c631f7e5e4c92a13edb8e3422d3a973>`<:ref:`dnnl_primitive_attr_t <doxid-structdnnl__primitive__attr>`>(attr) {}
	
	     *  Returns the fpmath mode
	    :ref:`fpmath_mode <doxid-group__dnnl__api__attributes_1ga0ad94cbef13dce222933422bfdcfa725>` get_fpmath_mode() const {
	        :ref:`dnnl_fpmath_mode_t <doxid-group__dnnl__api__attributes_1ga62f956692c5a70353f164e09ff524912>` result;
	        :ref:`error::wrap_c_api <doxid-structdnnl_1_1error_1a9d91127d0524c0b7ac1ae4ba4c79d0af>`(:ref:`dnnl_primitive_attr_get_fpmath_mode <doxid-group__dnnl__api__attributes_1gac63b70ab1d2fe88c31f03c961b2e924a>`(get(), &result),
	                "could not get fpmath mode primitive attribute");
	        return :ref:`fpmath_mode <doxid-group__dnnl__api__attributes_1ga0ad94cbef13dce222933422bfdcfa725>`(result);
	    }
	
	     *  Sets fpmath mode.
	     * 
	     *  @param mode Specified fpmath mode.
	    void set_fpmath_mode(:ref:`fpmath_mode <doxid-group__dnnl__api__attributes_1ga0ad94cbef13dce222933422bfdcfa725>` mode) {
	        :ref:`error::wrap_c_api <doxid-structdnnl_1_1error_1a9d91127d0524c0b7ac1ae4ba4c79d0af>`(:ref:`dnnl_primitive_attr_set_fpmath_mode <doxid-group__dnnl__api__attributes_1gafe55fa618bc10b65b6c0b6eca7e43840>`(
	                                  get(), :ref:`dnnl::convert_to_c <doxid-group__dnnl__api__primitives__common_1gaaa215c424a2a5c5f734600216dfb8873>`(mode)),
	                "could not set fpmath mode primitive attribute");
	    }
	
	     *  Returns the scratchpad mode.
	    :ref:`scratchpad_mode <doxid-group__dnnl__api__attributes_1gac24d40ceea0256c7d6cc3a383a0fa07f>` get_scratchpad_mode() const {
	        :ref:`dnnl_scratchpad_mode_t <doxid-group__dnnl__api__attributes_1gacda323181ab267e571c31435b0817de4>` result;
	        :ref:`error::wrap_c_api <doxid-structdnnl_1_1error_1a9d91127d0524c0b7ac1ae4ba4c79d0af>`(
	                :ref:`dnnl_primitive_attr_get_scratchpad_mode <doxid-group__dnnl__api__attributes_1gab14d8e830a52510a75a917f75764a6b8>`(get(), &result),
	                "could not get scratchpad mode primitive attribute");
	        return :ref:`scratchpad_mode <doxid-group__dnnl__api__attributes_1gac24d40ceea0256c7d6cc3a383a0fa07f>`(result);
	    }
	
	     *  Sets scratchpad mode.
	     * 
	     *  @param mode Specified scratchpad mode.
	    void set_scratchpad_mode(:ref:`scratchpad_mode <doxid-group__dnnl__api__attributes_1gac24d40ceea0256c7d6cc3a383a0fa07f>` mode) {
	        :ref:`error::wrap_c_api <doxid-structdnnl_1_1error_1a9d91127d0524c0b7ac1ae4ba4c79d0af>`(:ref:`dnnl_primitive_attr_set_scratchpad_mode <doxid-group__dnnl__api__attributes_1ga4adeb17e538392ec3a16d2f6ef3f7cca>`(
	                                  get(), :ref:`dnnl::convert_to_c <doxid-group__dnnl__api__primitives__common_1gaaa215c424a2a5c5f734600216dfb8873>`(mode)),
	                "could not set scratchpad mode primitive attribute");
	    }
	
	     *  Returns output scaling factors correspondence mask and values.
	     * 
	     *  @param mask Scaling factors correspondence mask that defines the
	     *      correspondence between the output tensor dimensions and the @p
	     *      scales vector. The set i-th bit indicates that a dedicated output
	     *      scaling factor is used for each index along that dimension. The
	     *      mask value of 0 implies a common output scaling factor for the
	     *      whole output tensor.
	     *  @param scales Vector of output scaling factors.
	    void get_output_scales(int &mask, std::vector<float> &scales) const {
	        :ref:`dnnl_dim_t <doxid-group__dnnl__api__memory_1ga872631b12a112bf43fba985cba24dd20>` count;
	        int c_mask;
	        const float *c_scales;
	        :ref:`error::wrap_c_api <doxid-structdnnl_1_1error_1a9d91127d0524c0b7ac1ae4ba4c79d0af>`(:ref:`dnnl_primitive_attr_get_output_scales <doxid-group__dnnl__api__attributes_1gaf85a41b0666a93ba20c756b49fdcb0c2>`(
	                                  get(), &count, &c_mask, &c_scales),
	                "could not get output scales primitive attribute");
	        scales.resize(count);
	
	        mask = c_mask;
	
	            scales[c] = c_scales[c];
	    }
	
	     *  Sets output scaling factors correspondence mask and values.
	     * 
	     *  Example usage:
	     *  @code
	     *      int mb = 32, oc = 32,
	     *          oh = 14, ow = 14; // convolution output params
	     *      // unique output scales per output channel
	     *      vector<float> scales = { ... };
	     *      int oc_dim = 1; // mb_dim = 0, channel_dim = 1, height_dim = 2, ...
	     * 
	     *      // construct a convolution descriptor
	     *      dnnl::convolution::desc conv_d;
	     * 
	     *      dnnl::primitive_attr attr;
	     *      attr.set_output_scales(attr, oc, 1 << oc_dim, scales);
	     * 
	     *      :ref:`dnnl::primitive_desc <doxid-structdnnl_1_1primitive__desc>` conv_pd(conv_d, attr, :ref:`engine <doxid-group__dnnl__api__primitives__common_1gga94efdd650364f4d9776cfb9b711cbdc1aad1943a9fd6d3d7ee1e6af41a5b0d3e7>`);
	     *

.. note:: 

   The order of dimensions does not depend on how elements are laid out in memory. For example:
   
   * for a 2D CNN activations tensor the order is always (n, c)
   
   * for a 4D CNN activations tensor the order is always (n, c, h, w)
   
   * for a 5D CNN weights tensor the order is always (g, oc, ic, kh, kw)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mask

		- Defines the correspondence between the output tensor dimensions and the ``scales`` vector. The set i-th bit indicates that a dedicated scaling factor is used for each index along that dimension. Set the mask to 0 to use a common output scaling factor for the whole output tensor.

	*
		- scales

		- Constant vector of output scaling factors. If the scaling factors are known at the time of this call, the following equality must hold: :math:`scales.size() = \prod\limits_{d \in mask} output.dims[d].` Violations can only be detected when the attributes are used to create a primitive descriptor. If the scaling factors are not known at the time of the call, this vector must contain a single :ref:`DNNL_RUNTIME_F32_VAL <doxid-group__dnnl__api__memory_1gab16365c11b4dc88fbb453edb51f1979f>` value and the output scaling factors must be passed at execution time as an argument with index :ref:`DNNL_ARG_ATTR_OUTPUT_SCALES <doxid-group__dnnl__api__primitives__common_1ga0afb48b0c2b8f3ee30609aaa47aa29db>`.

.. index:: pair: function; get_scales
.. _doxid-structdnnl_1_1post__ops_1aba36c92225a22ceed02064fe1b5209cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_scales(int arg, int& mask, std::vector<float>& scales) const

Returns scaling factors correspondence mask and values for a given memory argument.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arg

		- Parameter argument index as passed to the :ref:`primitive::execute() <doxid-structdnnl_1_1primitive_1a18a484f0f1fecbc6a58fca1a58f6d8d4>` call.

	*
		- mask

		- Scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` vector. The set i-th bit indicates that a dedicated scaling factor is used for each index along that dimension. Set the mask to 0 to use a common scaling factor for the whole output tensor.

	*
		- scales

		- Output vector of scaling factors.

.. index:: pair: function; set_scales
.. _doxid-structdnnl_1_1post__ops_1a3dd0e698adc3e501ba1069290d314b96:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void set_scales(int arg, int mask, const std::vector<float>& scales)

Sets scaling factors for primitive operations for a given memory argument.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arg

		- Parameter argument index as passed to the :ref:`primitive::execute() <doxid-structdnnl_1_1primitive_1a18a484f0f1fecbc6a58fca1a58f6d8d4>` call.

	*
		- mask

		- Scaling factors correspondence mask that defines the correspondence between the tensor dimensions and the ``scales`` vector. The set i-th bit indicates that a dedicated scaling factor is used for each index along that dimension. Set the mask to 0 to use a common scaling factor for the whole output tensor.

	*
		- scales

		- Constant vector of scaling factors. The following equality must hold: :math:`scales.size() = \prod\limits_{d \in mask} argument.dims[d].`



.. rubric:: See also:

:ref:`dnnl_primitive_attr_set_scales <doxid-group__dnnl__api__attributes_1gaaa6b2f9a167cfd6ddee2ec93be8ea41e>`

dnnl::primitive_attr::set_output_scales

.. index:: pair: function; get_zero_points
.. _doxid-structdnnl_1_1post__ops_1ad8a22da09f2b251a97f14c8a388ad09f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_zero_points(int arg, int& mask, std::vector<int32_t>& zero_points) const

Returns zero points correspondence mask and values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arg

		- Parameter argument index as passed to the :ref:`primitive::execute() <doxid-structdnnl_1_1primitive_1a18a484f0f1fecbc6a58fca1a58f6d8d4>` call.

	*
		- mask

		- Zero points correspondence mask that defines the correspondence between the output tensor dimensions and the ``zero_points`` vector. The set i-th bit indicates that a dedicated zero point is used for each index along that dimension. Set the mask to 0 to use a common zero point for the whole output tensor.

	*
		- zero_points

		- Output vector of zero points.

.. index:: pair: function; set_zero_points
.. _doxid-structdnnl_1_1post__ops_1ae9302dadab0571ff4387cf8a5f050160:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void set_zero_points(int arg, int mask, const std::vector<int32_t>& zero_points)

Sets zero points for primitive operations for a given memory argument.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arg

		- Parameter argument index as passed to the :ref:`primitive::execute() <doxid-structdnnl_1_1primitive_1a18a484f0f1fecbc6a58fca1a58f6d8d4>` call.

	*
		- mask

		- Zero point correspondence mask that defines the correspondence between the tensor dimensions and the ``zero_points`` vector. The set i-th bit indicates that a dedicated zero point is used for each index along that dimension. Set the mask to 0 to use a common zero point for the whole output tensor.

	*
		- zero_points

		- Constant vector of zero points. If the zero points are known at the time of this call, the following equality must hold: :math:`zero\_points.size() = \prod\limits_{d \in mask} argument.dims[d].` If the zero points are not known at the time of the call, this vector must contain a single :ref:`DNNL_RUNTIME_S32_VAL <doxid-group__dnnl__api__memory_1ga30139d5110e9e895ccd93fe503ca4c35>` value and the zero points must be passed at execution time as an argument with index :ref:`DNNL_ARG_ATTR_ZERO_POINTS <doxid-group__dnnl__api__primitives__common_1gaf8d879adfe2baa2f9f2a5143a0f274b6>`.



.. rubric:: See also:

:ref:`dnnl_primitive_attr_set_zero_points <doxid-group__dnnl__api__attributes_1ga6f4b625c7f238883fe32cbf6829b7f30>`

dnnl::primitive_attr::set_output_scales

.. index:: pair: function; get_post_ops
.. _doxid-structdnnl_1_1post__ops_1a27a9dd38b90707bceb50e7cd073e6b86:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const post_ops get_post_ops() const

Returns post-ops previously set via :ref:`set_post_ops() <doxid-structdnnl_1_1post__ops_1ac2a1ad4e8978966a8723baedf75d0edd>`.



.. rubric:: Returns:

Post-ops.

.. index:: pair: function; set_post_ops
.. _doxid-structdnnl_1_1post__ops_1ac2a1ad4e8978966a8723baedf75d0edd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void set_post_ops(const post_ops ops)

Sets post-ops.

.. note:: 

   There is no way to check whether the post-ops would be supported by the target primitive. Any error will be reported by the respective primitive descriptor constructor.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ops

		- Post-ops object to copy post-ops from.

.. index:: pair: function; set_rnn_data_qparams
.. _doxid-structdnnl_1_1post__ops_1a20cf7c08b56ad23a7125478ce7ac1113:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void set_rnn_data_qparams(float scale, float shift)

Sets quantization scale and shift parameters for RNN data tensors.

For performance reasons, the low-precision configuration of the RNN primitives expect input activations to have the unsigned 8-bit integer data type. The scale and shift parameters are used to quantize floating-point data to unsigned integer and must be passed to the RNN primitive using attributes.

The quantization formula is ``scale * data + shift``.

Example usage:

.. ref-code-block:: cpp

	*      // RNN parameters
	*      int l = 2, t = 2, mb = 32, sic = 32, slc = 32, dic = 32, dlc = 32;
	*      // Activations quantization parameters
	*      float scale = 63.f, shift = 64.f;
	* 
	*      primitive_attr attr;
	* 
	*      // Set scale and shift for int8 quantization of activation
	*      attr.set_rnn_data_qparams(scale, shift);
	* 
	*      // Create and configure rnn op_desc
	*      vanilla_rnn_forward::desc :ref:`rnn_d <doxid-group__dnnl__api__primitives__common_1gga94efdd650364f4d9776cfb9b711cbdc1a5bada9b07803d3e657d5bdc592f7fc52>`(/* arguments */);
	*      vanilla_rnn_forward::primitive_desc :ref:`rnn_d <doxid-group__dnnl__api__primitives__common_1gga94efdd650364f4d9776cfb9b711cbdc1a5bada9b07803d3e657d5bdc592f7fc52>`(:ref:`rnn_d <doxid-group__dnnl__api__primitives__common_1gga94efdd650364f4d9776cfb9b711cbdc1a5bada9b07803d3e657d5bdc592f7fc52>`, attr, :ref:`engine <doxid-group__dnnl__api__primitives__common_1gga94efdd650364f4d9776cfb9b711cbdc1aad1943a9fd6d3d7ee1e6af41a5b0d3e7>`);
	*

.. note:: 

   Quantization scale and shift are common for src_layer, src_iter, dst_iter, and dst_layer.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- scale

		- The value to scale the data by.

	*
		- shift

		- The value to shift the data by.

.. index:: pair: function; get_rnn_data_qparams
.. _doxid-structdnnl_1_1post__ops_1a7c6f9f1ae3e868240f1d01f68e8f55ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_rnn_data_qparams(float& scale, float& shift)

Returns the quantization scale and shift parameters for RNN data tensors.

.. note:: 

   Quantization scale and shift are common for src_layer, src_iter, dst_iter, and dst_layer.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- scale

		- The value to scale the data by.

	*
		- shift

		- The value to shift the data by.

.. index:: pair: function; set_rnn_weights_qparams
.. _doxid-structdnnl_1_1post__ops_1a802aea3d7e50aefc8eae68f84ae44af3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void set_rnn_weights_qparams(int mask, const std::vector<float>& scales)

Sets quantization scaling factors for RNN weights tensors.

The low-precision configuration of the RNN primitives expect input weights to use the signed 8-bit integer data type. The scaling factors are used to quantize floating-point data to signed integer and must be passed to RNN primitives using attributes.

.. note:: 

   The dimension order is always native and does not depend on the actual layout used. For example, five-dimensional weights always have (l, d, i, g, o) logical dimension ordering.
   
   Quantization scales are common for weights_layer and weights_iteration



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mask

		- Scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` vector. The set i-th bit indicates that a dedicated scaling factor should be used each index along that dimension. Set the mask to 0 to use a common scaling factor for the whole output tensor.

	*
		- scales

		- Constant vector of output scaling factors. The following equality must hold: :math:`scales.size() = \prod\limits_{d \in mask} weights.dims[d].` Violations can only be detected when the attributes are used to create a primitive descriptor.

.. index:: pair: function; get_rnn_weights_qparams
.. _doxid-structdnnl_1_1post__ops_1aacb4e2be880583eec5bb86977151a2cc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_rnn_weights_qparams(int& mask, std::vector<float>& scales)

Returns the quantization scaling factors for RNN projection weights tensors.

.. note:: 

   The dimension order is always native and does not depend on the actual layout used. For example, five-dimensional weights always have (l, d, i, g, o) logical dimension ordering.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mask

		- Scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` vector. The set i-th bit indicates that a dedicated scaling factor should be used each index along that dimension. Set the mask to 0 to use a common scaling factor for the whole output tensor.

	*
		- scales

		- Constant vector of output scaling factors. The following equality must hold: :math:`scales.size() = \prod\limits_{d \in mask} weights.dims[d].` Violations can only be detected when the attributes are used to create a primitive descriptor.

.. index:: pair: function; set_rnn_weights_projection_qparams
.. _doxid-structdnnl_1_1post__ops_1a059426e563fab17134c341f40ede2796:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void set_rnn_weights_projection_qparams(
		int mask,
		const std::vector<float>& scales
		)

Sets quantization scaling factors for RNN projection weights tensors.

passed to RNN primitives using attributes.

.. note:: 

   The dimension order is always native and does not depend on the actual layout used. For example, five-dimensional weights always have (l, d, i, g, o) logical dimension ordering.
   
   Quantization scales are common for weights_layer and weights_iteration



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mask

		- Scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` vector. The set i-th bit indicates that a dedicated scaling factor should be used each index along that dimension. Set the mask to 0 to use a common scaling factor for the whole output tensor.

	*
		- scales

		- Constant vector of output scaling factors. The following equality must hold: :math:`scales.size() = \prod\limits_{d \in mask} weights.dims[d].` Violations can only be detected when the attributes are used to create a primitive descriptor.

.. index:: pair: function; get_rnn_weights_projection_qparams
.. _doxid-structdnnl_1_1post__ops_1a38fd234aecae3c112565d1d6a11736ac:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void get_rnn_weights_projection_qparams(int& mask, std::vector<float>& scales)

Returns the quantization scaling factors for RNN projection weights tensors.

.. note:: 

   The dimension order is always native and does not depend on the actual layout used. For example, five-dimensional weights always have (l, d, i, g, o) logical dimension ordering.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mask

		- Scaling factors correspondence mask that defines the correspondence between the output tensor dimensions and the ``scales`` vector. The set i-th bit indicates that a dedicated scaling factor should be used each index along that dimension. Set the mask to 0 to use a common scaling factor for the whole output tensor.

	*
		- scales

		- Constant vector of output scaling factors. The following equality must hold: :math:`scales.size() = \prod\limits_{d \in mask} weights.dims[d].` Violations can only be detected when the attributes are used to create a primitive descriptor.

